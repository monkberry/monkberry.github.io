{"name":"Monkberry","tagline":"JavaScript DOM Template Engine","body":"# Monkberry - JavaScript template engine\r\n[![Build Status](https://travis-ci.org/monkberry/monkberry.svg?branch=master)](https://travis-ci.org/monkberry/monkberry)\r\n\r\nMonkberry compile template to JavaScript code for creating nodes with DOM API and helper methods for updating content of these nodes.\r\n\r\n```\r\nnpm install monkberry --save\r\n```\r\n\r\n## Features\r\n\r\n* Small, dependency free\r\n* Simple and minimalistic\r\n* Fully tested\r\n* One-way data flow\r\n* Precompiled templates\r\n* SourceMaps\r\n* Custom tags\r\n* Extremely fast!\r\n\r\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\r\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\r\n## Table of Contents\r\n\r\n  - [Example](#example)\r\n  - [Documentation](#documentation)\r\n    - [Getting Started](#getting-started)\r\n    - [Expressions](#expressions)\r\n    - [If, Else](#if-else)\r\n    - [For](#for)\r\n    - [Default values](#default-values)\r\n    - [Filters](#filters)\r\n    - [Custom tags](#custom-tags)\r\n    - [Spread attributes](#spread-attributes)\r\n    - [Importing](#importing)\r\n    - [Event Handling](#event-handling)\r\n    - [Globals](#globals)\r\n    - [Prerender](#prerender)\r\n    - [Wrappers](#wrappers)\r\n    - [Transforms](#transforms)\r\n    - [Parsers](#parsers)\r\n    - [Unsafe](#unsafe)\r\n    - [Comments](#comments)\r\n  - [API Reference](#api-reference)\r\n    - [Monkberry](#monkberry)\r\n      - [monkberry.render(name, [values, [noCache]])](#monkberryrendername-values-nocache)\r\n      - [monkberry.prerender(name, times)](#monkberryprerendername-times)\r\n      - [monkberry.mount(templates)](#monkberrymounttemplates)\r\n    - [Monkberry.View](#monkberryview)\r\n      - [view.appendTo(toNode)](#viewappendtotonode)\r\n      - [view.insertBefore(toNode)](#viewinsertbeforetonode)\r\n      - [view.createDocument()](#viewcreatedocument)\r\n      - [view.update(data)](#viewupdatedata)\r\n      - [view.remove([force])](#viewremoveforce)\r\n      - [view.getElementById(id)](#viewgetelementbyidid)\r\n      - [view.querySelector(query)](#viewqueryselectorquery)\r\n  - [Tests](#tests)\r\n  - [Benchmarks](#benchmarks)\r\n\r\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\r\n\r\n## Example\r\n\r\nMonkberry will compile this template:\r\n```html\r\n<div>\r\n  <h1>{{ title }}</h1>\r\n  <p>\r\n    {{ text }}\r\n  </p>\r\n</div>\r\n```\r\n\r\nTo JavaScript code like this:\r\n```js\r\nvar div = document.createElement('div');\r\nvar h1 = document.createElement('h1');\r\nvar p = document.createElement('p');\r\n\r\ndiv.appendChild(h1);\r\ndiv.appendChild(p);\r\n\r\n   ...\r\n\r\nview.update = function (data) {\r\n  h1.textContent = data.title;\r\n  p.textContent = data.text;\r\n};\r\n```\r\n\r\nWhich can be used like that: \r\n```js\r\nvar view = monkberry.render('template');\r\nview.appendTo(document.body); \r\n\r\nview.update({\r\n  title: 'Monkberry',\r\n  text: 'JavaScript DOM template engine'\r\n});\r\n```\r\n\r\n## Documentation\r\n\r\n### Getting Started\r\n\r\nMonkberry has support for both browserify via [monkberrify](https://github.com/monkberry/monkberrify) and for webpack via [monkberry-loader](https://github.com/monkberry/monkberry-loader). \r\n\r\nMonkberry can be used like CLI tool. Install Monkberry globally:\r\n\r\n```\r\nnpm install monkberry -g\r\n```\r\n\r\nTo compile all templates into single JavaScript file with source map run next command:\r\n\r\n```\r\nmonkberry --source-map --output template.js templates/*.html\r\n```\r\n\r\nRequire generated `template.js` and `monkberry.js` files and mount template:\r\n\r\n```js\r\nvar monkberry = require('monkberry');\r\nvar template = require('./template.js');\r\n\r\nmonkberry.mount(template);\r\n```\r\n\r\nRender that view.\r\n\r\n```js\r\nvar view = monkberry.render('template'); \r\n// or\r\nvar view = monkberry.render('template', {...}); \r\n```\r\n\r\nAttach generated DOM nodes to the page.\r\n\r\n```js\r\ndocument.getElementById('root').appendChild(view.createDocument());\r\n```\r\n\r\nNow, to update data of view on page:\r\n\r\n```js\r\nview.update({...});\r\n// or update only what's needed\r\nview.update({key: value});\r\n```\r\n\r\n### Expressions\r\n\r\nMonkberry perceives everything inside `{{` and `}}` mustache as JavaScript expression.\r\n\r\n```html\r\n<div class=\"greetings {{ visible ? '' : 'hidden' }}\">\r\n  Hello, {{ user.name + \"!\" }}\r\n</div>\r\n```\r\n\r\n### If, Else\r\nCan be any valid JavaScrpt expressions.\r\n```twig\r\n{% if count < 0 || count > 10 %}\r\n  ...\r\n{% else %}\r\n  ...\r\n{% endif %}\r\n```\r\nAny number on variables in `if`:\r\n```twig\r\n{% if array.indexOf(search) != -1 %}\r\n  ...\r\n{% endif %}\r\n```\r\n\r\n> Note what Monkberry update only one of `if`/`else` block.\r\n> ```twig\r\n> {% if check %}\r\n>   Then {{ value }}!\r\n> {% else %}\r\n>   Else {{ value }}!\r\n> {% endif %}\r\n> ```\r\n> Render that template:\r\n> ```js\r\n> var view = monkberry.render('example', {\r\n>   check: true,\r\n>   value: 'one'\r\n> });\r\n> ```\r\n> View will be `Then one!`. When if update view:\r\n> ```js\r\n> view.update({\r\n>   check: false,\r\n>   value: 'two'\r\n> });\r\n> ```\r\n> View will be `Else two!`. But if update only `check`, variable of then part will be same as before.\r\n> ```js\r\n> view.update({check: true});\r\n> ```\r\n> View will be `Then one!`. \r\n>\r\n> This is happens becouse Monkberry does not stores variables passed to `update` function, it stores only DOM nodes.\r\n> Monkberry will update only one part of `if`/`else`.\r\n\r\n### For\r\n\r\nMonkberry can loop other arrays and objects as well. \r\n\r\n```twig\r\n{% for array %}\r\n  {{ name }}\r\n{% endfor %}\r\n```\r\nIn this form, body of `for` has access only for variables iterating on.\r\n```js\r\nview.update({\r\n  array: [\r\n    {name: 'Anton'},\r\n    ...\r\n  ]\r\n});\r\n```\r\n\r\nTo access outer scope specify iterator name.\r\n\r\n```twig\r\n{% for user of array %}\r\n  {{ user.name }}\r\n{% endfor %}\r\n```\r\n\r\nAlso key can be specified.\r\n```twig\r\n{% for key, user of array %}\r\n  {{ key }}: {{ user.name }}\r\n{% endfor %}\r\n```\r\n\r\n### Default values\r\n\r\nRender of view contains two phase: node creation and update of node contents with data.\r\n\r\n```js\r\nvar view = monkberry.render('template', data);\r\n// Equals to:\r\nvar view = monkberry.render('template');\r\nview.update(data);\r\n```\r\n\r\nSome times data for view does not available and it's use full to place come data as default.\r\nBest way to do it is use logical _OR_ operator `||`.\r\n\r\n```twig\r\n<div class=\"foo {{ modify || 'baz' }}\">\r\n    {{ content || \"No content\" }}\r\n</div>\r\n```\r\n\r\nIn this case on first phase of render view will be filled with default data:\r\n\r\n```twig\r\n<div class=\"foo baz\">\r\n    No content\r\n</div>\r\n```\r\n\r\nNote if you will use some variable in right side of _OR_ operator, what can't be used as default data.\r\n  \r\n```twig\r\n{{ content || \"No content\" + foo }}\r\n```\r\n\r\n\r\n\r\n### Filters\r\n\r\nAny expression support filter statement.\r\n```twig\r\nHello, {{ user.name | upper }}\r\n```\r\n\r\nTo define that filter:\r\n```js\r\nmonkberry.filters.upper = function (text) {\r\n  return text.toUpperCase();\r\n};\r\n```\r\n\r\nAlso Monkberry understand parameters for filters:\r\n```js\r\nmonkberry.filters.replace = function (text, from, to) {\r\n  return text.replace(from, to);\r\n};\r\n```\r\n\r\n```twig\r\n{{ text | replace(/.../, '$1') }}\r\n```\r\n\r\nAnd allow to combine filters:\r\n```twig\r\n{{ text | lower | replace(/.../, '$1') | upper }}\r\n```\r\n\r\nThat expression will be compiled to next JavaScript:\r\n```js\r\nupper(replace(lower(text), /.../, '$1'));\r\n```\r\n\r\nFilters can be used in expressions, `if` and `for` statements.\r\n\r\n### Custom tags\r\n\r\nAny template mounted to Monkberry can be called as custom tag. \r\n\r\n```js\r\nmonkberry.mount(require('./views/block.html'));\r\n```\r\n\r\nInside another template possible to insert that `block` templace as custom tag:\r\n\r\n```html\r\n<div>\r\n  <block/>\r\n</div>\r\n```\r\n\r\nOne file can contains several definitions of custom tags:\r\n```html\r\n<my-tag>\r\n  ...\r\n</my-tag>\r\n<my-second-tag>\r\n  ...\r\n</my-second-tag>\r\n```\r\n\r\nCustom tags may contains variables:\r\n```twig\r\n<greet>\r\n  {{ value }}, {{ name }}!\r\n</greet>\r\n```\r\n\r\nTo render that custom tag, specify variables as attributes:\r\n\r\n```twig\r\n<greet value=\"Hello\" name=\"world\">\r\n<greet value=\"Hello\" name=\"{{ user.name }}\">\r\n```\r\n\r\n### Spread attributes\r\n\r\nSpread attributes allow easily convert object into node attributes.  \r\nThe properties of the object that you pass in are copied onto the node's attributes.\r\n\r\n```twig\r\n<input {{...attr}}/>\r\n```\r\n\r\n```js\r\nvar view = monkberry.render('template', {attr: {\r\n  id: 'foo', \r\n  value: 'baz'\r\n}});\r\n```\r\n\r\nYou can combine it with other attributes.\r\n\r\n```twig\r\n<input {{...attr}} value={{ value }}/>\r\n```\r\n\r\nNote what later updates of attributes override previous ones.\r\n\r\n```js\r\nview.update({value: 'baz'});\r\n// ...\r\nview.update({attr: {value: 'new baz'}}); // Will override previous value.\r\n```\r\n\r\nSpread operator also works well with custom attributes. In fact, this is best way to pass data into custom tag. \r\n \r\n```twig\r\n<my-tag {{...attr}}/>\r\n``` \r\n \r\n```twig\r\n<my-tag>\r\n    <input type={{ type }} value={{ value }}>\r\n</my-tag>\r\n``` \r\n\r\n### Importing\r\n\r\nIt is possible to require template within another template. \r\n  \r\n```twig\r\n{% import './path/to/template.html' %}\r\n\r\n    <template/>\r\n \r\n```\r\n\r\nImport statement will require that template and automatically mount it to monkberry.\r\n\r\n### Event Handling\r\n\r\nThere are a few ways to deal with event handling in Monkberry.\r\nAdd event listener to node directly: \r\n \r\n```js\r\nview.querySelector('.button').addEventListener('click', function (event) {\r\n    ...\r\n});\r\n```\r\n\r\nBut this is difficult when dealing with conditions and loops (it's is possible to solve if using [wrappers](#wrappers)).\r\n\r\nBetter approach is to use [event delegating](https://github.com/monkberry/events).\r\n\r\n```js\r\nview.on('click', '.button', function (event) {\r\n    ...\r\n});\r\n```\r\n\r\n### Globals\r\n\r\nMonkberry also support global variables. This is very usefull if using `window` variable inside of templates. \r\nOr if using translation function like this: `{{ __('greeting') + userName }}`. \r\n\r\nTo do it, you need to specify globals as array of variables names for compiler to pass. Read monkberry loaders docs for more info.   \r\n\r\n### Prerender\r\n\r\nTo speedup render Monkberry can prerender DOM nodes to use them in future.\r\n\r\n```js\r\nmonkberry.prerender('template', 10); // Preprender template 10 times.\r\n```\r\n\r\nThen next `render` call will use one of these prerendered views:\r\n```js\r\nmonkberry.render('template', {...}); // Will use already created DOM nodes.\r\n```\r\n\r\nThis is very usefull to do then browser waiting some xhr request.\r\n\r\nTo get info about prerendered template in runtime, use `monkberry.pool.store`.\r\n\r\n### Wrappers\r\n\r\nEvery template in Monkbeery when rendered can be \"wrapped\" by function.\r\n\r\nFor example we have a template `logo.html`:\r\n```twig\r\n<div>\r\n  <i class=\"svg-icon\"></i>\r\n</div>\r\n```\r\n\r\nAnd we want to insert SVG nodes inside `i` tag on render. This is can be done via wrappers:\r\n```js\r\nmonkberry.wrappers.logo = function (view) {\r\n  view.querySelector('.svg-icon').appendChild(svgIconNodes);\r\n  return view;\r\n};\r\n```\r\n\r\nWrappers usefull to manipulate view's nodes, adding event listeners and a lot of other staff.\r\n\r\n### Transforms\r\n\r\nTransformers allow to modify [AST](https://en.wikipedia.org/wiki/Abstract_syntax_tree) before compilation of templates. \r\nList of AST nodes can be founded here: [ast.js](https://github.com/monkberry/parser/blob/master/src/ast.js)\r\nExample of transform which trim whitespaces: [whitespace.js](https://github.com/monkberry/monkberry/blob/master/src/optimize/whitespace.js)\r\n\r\nAdd transforms to Monkbeery before compilation:\r\n```js\r\nimport { Compiler } from 'monkberry';\r\nimport { myTransform } from './myTransform';\r\n\r\nvar compiler = new Compiler();\r\ncompiler.transforms.custom = myTransform;\r\n```\r\n\r\n### Parsers\r\n\r\nNow Monkberry support only one type of parser, mustage like (`monk` named). But it can be extender with custom parsers. Every parser must return valid [AST](https://github.com/monkberry/parser/blob/master/src/ast.js) tree.\r\n\r\n```js\r\nimport { Compiler } from 'monkberry';\r\nimport { myParser } from './parser';\r\n\r\nvar compiler = new Compiler();\r\ncompiler.parsers.myParser = myTransform;\r\n\r\ncompiler.addSource('template', code, 'myParser');\r\ncompiler.addSource('another', code, 'monk');\r\n\r\nvar output = compiler.compile();\r\n```\r\n\r\n### Unsafe\r\n\r\nMonkberry escape all inserted variables by default. But if some times you want to insert \r\nsome HTML template via variable you can you _unsafe_ statement which is using `innerHTML`. \r\nImproper use of the _unsafe_ statement can open you up to a [cross-site scripting (XSS)](https://en.wikipedia.org/wiki/Cross-site_scripting) attack. \r\n\r\n```twig\r\n{% unsafe '<a href=\"XSS\">...</a>' %}\r\n{% unsafe html %}\r\n```\r\n\r\n### Comments\r\n\r\nYou can use standard html comments.\r\n \r\n```twig\r\n<!-- Comment does here -->\r\n```\r\n\r\nComments will be cut out from template. \r\n\r\n## API Reference\r\n\r\nMonkberry API strictly follows [semantic versioning](http://semver.org).  \r\n\r\n### Monkberry\r\n\r\nThen using Monkberry via `require('monkberry')` single instance returned. \r\nTo create a new Monkberry object or extend prototype use `monkberry.constructor`.\r\n  \r\n#### monkberry.render(name, [values, [noCache]])\r\n\r\nGenerates DOM nodes, and returns new `Monkberry.View` instance.\r\n\r\n* `name`: `string` - name of template.\r\n* `values`: `Object` - Optional. Data to update view.\r\n* `noCache`: `boolean` - Optional. Use or not cached view from pool.\r\n\r\n#### monkberry.prerender(name, times)\r\n\r\nGenerates views for future calls of render method.\r\n\r\n* `name`: `string` - name of template.\r\n* `times`: `number` - how many times.\r\n\r\n#### monkberry.mount(templates)\r\n\r\nAdd template to monkberry.\r\n\r\n* `templates`: `Object` - monkberry compiled templates.\r\n\r\nExample:\r\n\r\n```js\r\nmonkberry.mount(require('./template.monk'));\r\n``` \r\n \r\n### Monkberry.View\r\n\r\n#### view.appendTo(toNode)\r\n\r\nAppend rendered view nodes to specified node.\r\n\r\n* `toNode`: `Element` - DOM node.\r\n\r\n#### view.insertBefore(toNode)\r\n\r\nInsert rendered view nodes before specified node.\r\n\r\n* `toNode`: `Element` - DOM node.\r\n\r\n#### view.createDocument()\r\n\r\nReturn view's nodes. Note what if your template contains more then one root element, `createDocument` function will \r\nreturn `DocumentFragment` what contains all these nodes. If you have only one root node, it will be returned as is.\r\n\r\n#### view.update(data)\r\n\r\nUpdate rendered template with new data. You can specify only part of data to update or update entire data.\r\n\r\n* `data`: `Object|Array` - values to update in template.\r\n\r\nExample:\r\n\r\n```js\r\nvar data = {\r\n    title: 'Title #1',\r\n    content: '...'\r\n};\r\n\r\nvar view = monkberry.render('...', data);\r\n\r\nview.update({title: 'Title #2'});\r\n```\r\n\r\n#### view.remove([force])\r\n\r\nRemove view's nodes from document, and puts it to pool for future reuse.\r\n\r\n* `force`: `boolean` - Optional. False be default. If true, removed view will not be putted into pool.\r\n\r\n\r\n#### view.getElementById(id)\r\n\r\nGet element by id.\r\n\r\n* `id`: `string` - id of element.\r\n\r\n#### view.querySelector(query)\r\n\r\nSelect node by query.\r\n\r\n* `query`: `string` - query to select node.\r\n\r\n> Note what this function uses [Element.matches()](https://developer.mozilla.org/en-US/docs/Web/API/Element/matches) for checking root nodes. Include polyfill for matches if you use it.\r\n\r\n\r\n## Tests\r\n\r\nMonkberry uses [Jasmine](http://jasmine.github.io) and [testem](https://github.com/airportyh/testem). To run test locally run:\r\n```\r\ntestem ci\r\n```\r\n\r\n## Benchmarks\r\n\r\nBenchmarks covers a few use cases, and compare Monkberry with [React](https://facebook.github.io/react/) and [temple-wat](https://github.com/KosyanMedia/temple).\r\nAlso it's contains real site code for soft/hard update tests.\r\n\r\n* [monkberry.github.io/benchmark](http://monkberry.github.io/benchmark/)\r\n* [github.com/monkberry/benchmark](https://github.com/monkberry/benchmark)","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}